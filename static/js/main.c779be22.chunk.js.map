{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","goods","setGoods","isUsable","isAlphabetActive","isLengthActive","isReverseActive","sortState","setSortState","getReorderedGoods","sortType","isReversed","visibleGoods","updatedGoods","NONE","prevState","reverse","ALPHABET","sort","a","b","localeCompare","LENGTH","lengthDifference","length","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,iEAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAWE,IAAME,EAAgB,WAC3B,MAA0BC,mBAAS,GAAD,OAAKF,IAAvC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCF,mBAAS,CACzCG,UAAU,EACVC,kBAAkB,EAClBC,gBAAgB,EAChBC,iBAAiB,IAJnB,mBAAOC,EAAP,KAAkBC,EAAlB,KAOA,SAASC,EAAT,GAAsE,IAAzCC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,WAC/BC,EAAY,YAAOX,GACrBY,EAAyB,GAE7B,GAAIF,GAAcD,IAAab,EAASiB,KACtCN,GAAa,SAACO,GAAD,mBAAC,eACTA,GADQ,IAEXT,iBAAkBS,EAAUT,qBAGzBC,EAAUH,kBAAqBG,EAAUF,gBAC5CG,GAAa,SAACO,GAAD,mBAAC,eACTA,GADQ,IAEXZ,UAAWY,EAAUZ,cAIzBU,EAAe,YAAID,GAAcI,cAC5B,CACL,OAAQN,GACN,KAAKb,EAASoB,SACZT,EAAa,CACXL,UAAU,EACVC,kBAAkB,EAClBC,gBAAgB,EAChBC,gBAAiBK,IAEnBE,EAAe,YAAID,GAAcM,MAC/B,SAACC,EAAWC,GAAZ,OAA0BD,EAAEE,cAAcD,MAE5C,MACF,KAAKvB,EAASyB,OACZd,EAAa,CACXL,UAAU,EACVC,kBAAkB,EAClBC,gBAAgB,EAChBC,gBAAiBK,IAEnBE,EAAe,YAAID,GAAcM,MAAK,SAACC,EAAWC,GAChD,IAAMG,EAAmBJ,EAAEK,OAASJ,EAAEI,OAEtC,OAAyB,IAArBD,EACKA,EAGFJ,EAAEE,cAAcD,MAEzB,MACF,KAAKvB,EAASiB,KACZN,EAAa,CACXL,UAAU,EACVC,kBAAkB,EAClBC,gBAAgB,EAChBC,iBAAiB,IAEnBO,EAAY,UAAOf,GAMnBa,GAAcD,IAAab,EAASiB,OACtCD,EAAeA,EAAaG,WAIhCd,EAASW,GAGX,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWlB,EAAUH,iBACjB,iBACA,0BACJuB,QAAS,kBAAMlB,EAAkB,CAC/BC,SAAUb,EAASoB,SACnBN,WAAYJ,EAAUD,mBAP1B,iCAaA,wBACEoB,KAAK,SACLD,UAAWlB,EAAUF,eACjB,oBACA,6BACJsB,QAAS,kBAAMlB,EAAkB,CAC/BC,SAAUb,EAASyB,OACnBX,WAAYJ,EAAUD,mBAP1B,4BAaA,wBACEoB,KAAK,SACLD,UAAWlB,EAAUD,gBACjB,oBACA,6BACJqB,QAAS,kBAAMlB,EAAkB,CAC/BC,SAAUb,EAASiB,KACnBH,YAAY,KAPhB,qBAaCJ,EAAUJ,UACT,wBACEuB,KAAK,SACLD,UAAU,4BACVE,QAAS,kBAAMlB,EACb,CAAEC,SAAUb,EAASiB,KAAMH,YAAY,KAJ3C,sBAYJ,6BACGV,EAAM2B,KAAI,SAAAC,GAAI,OACb,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YChKnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c779be22.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType;\n  isReversed: boolean;\n};\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState([...goodsFromServer]);\n  const [sortState, setSortState] = useState({\n    isUsable: false,\n    isAlphabetActive: false,\n    isLengthActive: false,\n    isReverseActive: false,\n  });\n\n  function getReorderedGoods({ sortType, isReversed }: ReorderOptions) {\n    const visibleGoods = [...goods];\n    let updatedGoods: string[] = [];\n\n    if (isReversed && sortType === SortType.NONE) {\n      setSortState((prevState) => ({\n        ...prevState,\n        isReverseActive: !prevState.isReverseActive,\n      }));\n\n      if (!sortState.isAlphabetActive && !sortState.isLengthActive) {\n        setSortState((prevState) => ({\n          ...prevState,\n          isUsable: !prevState.isUsable,\n        }));\n      }\n\n      updatedGoods = [...visibleGoods].reverse();\n    } else {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          setSortState({\n            isUsable: true,\n            isAlphabetActive: true,\n            isLengthActive: false,\n            isReverseActive: isReversed,\n          });\n          updatedGoods = [...visibleGoods].sort(\n            (a: string, b: string) => a.localeCompare(b),\n          );\n          break;\n        case SortType.LENGTH:\n          setSortState({\n            isUsable: true,\n            isAlphabetActive: false,\n            isLengthActive: true,\n            isReverseActive: isReversed,\n          });\n          updatedGoods = [...visibleGoods].sort((a: string, b: string) => {\n            const lengthDifference = a.length - b.length;\n\n            if (lengthDifference !== 0) {\n              return lengthDifference;\n            }\n\n            return a.localeCompare(b);\n          });\n          break;\n        case SortType.NONE:\n          setSortState({\n            isUsable: false,\n            isAlphabetActive: false,\n            isLengthActive: false,\n            isReverseActive: false,\n          });\n          updatedGoods = [...goodsFromServer];\n          break;\n        default:\n          break;\n      }\n\n      if (isReversed && sortType !== SortType.NONE) {\n        updatedGoods = updatedGoods.reverse();\n      }\n    }\n\n    setGoods(updatedGoods);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortState.isAlphabetActive\n            ? 'button is-info'\n            : 'button is-info is-light'}\n          onClick={() => getReorderedGoods({\n            sortType: SortType.ALPHABET,\n            isReversed: sortState.isReverseActive,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortState.isLengthActive\n            ? 'button is-success'\n            : 'button is-success is-light'}\n          onClick={() => getReorderedGoods({\n            sortType: SortType.LENGTH,\n            isReversed: sortState.isReverseActive,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortState.isReverseActive\n            ? 'button is-warning'\n            : 'button is-warning is-light'}\n          onClick={() => getReorderedGoods({\n            sortType: SortType.NONE,\n            isReversed: true,\n          })}\n        >\n          Reverse\n        </button>\n\n        {sortState.isUsable && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => getReorderedGoods(\n              { sortType: SortType.NONE, isReversed: false },\n            )}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}