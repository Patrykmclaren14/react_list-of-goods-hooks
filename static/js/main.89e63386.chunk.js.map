{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","updatedGoods","setUpdatedGoods","sortType","setSortType","isReverse","setIsReversed","getReorderedGoods","sort","isReversed","goodsCopy","ALPHABET","a","b","localeCompare","LENGTH","length","reverse","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,kDAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,uBAAAA,I,oBAAAA,M,KAUE,IAAME,EAAgB,WAC3B,MAAwCC,mBAAmBF,GAA3D,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAgCF,mBAAS,MAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAmCJ,oBAAS,GAA5C,mBAAOK,EAAP,KAAkBC,EAAlB,KAEMC,EAAoB,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,WAC7BC,EAAS,UAAOZ,GAEpB,OAAQU,GACN,KAAKX,EAASc,SACZD,EAAYA,EAAUF,MAAK,SAACI,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MACrDT,EAAYP,EAASc,UACrB,MACF,KAAKd,EAASkB,OACZL,EAAYA,EAAUF,MAAK,SAACI,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAClDZ,EAAYP,EAASkB,QAMrBN,GACFC,EAAUO,UAGZf,EAAgBQ,IAclB,OACE,sBAAKQ,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWf,IAAaN,EAASc,SAC7B,iBACA,0BACJS,QACE,kBAAMb,EACJ,CAAEC,KAAMX,EAASc,SAAUF,WAAYJ,KAP7C,iCAcA,wBACEc,KAAK,SACLD,UAAWf,IAAaN,EAASkB,OAC7B,oBACA,6BACJK,QACE,kBAAMb,EACJ,CAAEC,KAAMX,EAASkB,OAAQN,WAAYJ,KAP3C,4BAcA,wBACEc,KAAK,SACLD,UAAWb,EACP,oBACA,6BACJe,QA/Ca,WACnBd,GAAeD,GACfE,EAAkB,CAAEC,KAAML,EAAUM,YAAaJ,KAwC7C,sBAWGA,GAA0B,OAAbF,IAEd,wBACEgB,KAAK,SACLD,UAAU,4BACVE,QArDS,WACjBhB,EAAY,MACZE,GAAc,GACdJ,EAAgBJ,IA+CV,sBAWJ,6BACGG,EAAaoB,KAAI,SAACC,GAAD,OAChB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YCxHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.89e63386.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sort: SortType | null;\n  isReversed: boolean;\n};\n\nexport const App: React.FC = () => {\n  const [updatedGoods, setUpdatedGoods] = useState<string[]>(goodsFromServer);\n  const [sortType, setSortType] = useState(null as SortType | null);\n  const [isReverse, setIsReversed] = useState(false);\n\n  const getReorderedGoods = ({ sort, isReversed }: ReorderOptions) => {\n    let goodsCopy = [...goodsFromServer];\n\n    switch (sort) {\n      case SortType.ALPHABET:\n        goodsCopy = goodsCopy.sort((a, b) => a.localeCompare(b));\n        setSortType(SortType.ALPHABET);\n        break;\n      case SortType.LENGTH:\n        goodsCopy = goodsCopy.sort((a, b) => a.length - b.length);\n        setSortType(SortType.LENGTH);\n        break;\n      default:\n        break;\n    }\n\n    if (isReversed) {\n      goodsCopy.reverse();\n    }\n\n    setUpdatedGoods(goodsCopy);\n  };\n\n  const reverseGoods = () => {\n    setIsReversed(!isReverse);\n    getReorderedGoods({ sort: sortType, isReversed: !isReverse });\n  };\n\n  const resetGoods = () => {\n    setSortType(null);\n    setIsReversed(false);\n    setUpdatedGoods(goodsFromServer);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortType === SortType.ALPHABET\n            ? 'button is-info'\n            : 'button is-info is-light'}\n          onClick={\n            () => getReorderedGoods(\n              { sort: SortType.ALPHABET, isReversed: isReverse },\n            )\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortType === SortType.LENGTH\n            ? 'button is-success'\n            : 'button is-success is-light'}\n          onClick={\n            () => getReorderedGoods(\n              { sort: SortType.LENGTH, isReversed: isReverse },\n            )\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={isReverse\n            ? 'button is-warning'\n            : 'button is-warning is-light'}\n          onClick={reverseGoods}\n        >\n          Reverse\n        </button>\n\n        {\n          (isReverse || sortType !== null)\n        && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetGoods}\n          >\n            Reset\n          </button>\n        )\n        }\n      </div>\n\n      <ul>\n        {updatedGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}